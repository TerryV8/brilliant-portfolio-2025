---
# SOC Playbook: Unlock account and reset a user's password (Linux)
# Purpose:
#   - When credentials are blocked, unlock the account and rotate the password.
#   - Optionally force password change at next login and update SSH public key.
# Safety:
#   - Requires explicit variables; avoids printing secrets; writes audit breadcrumb.
# How to run (example):
#   ansible-playbook -i inventories/dev/hosts.yml playbooks/reset_user_password.yml -l app01 --become \
#     -e 'target_user=svc_app new_password_plain={{ vault_new_pw }} force_change_on_login=true unlock_account=true'
#   (Provide new_password_plain via Ansible Vault/CI masked var; do not hardcode.)

- name: Reset user password and unlock (Linux)
  hosts: all
  become: true
  gather_facts: false

  vars:
    # Required inputs
    target_user: "{{ target_user | default('', true) }}"
    new_password_plain: "{{ new_password_plain | default('', true) }}"  # supply via Vault/CI
    # Simplicity: playbook will always unlock and force password change

  pre_tasks:
    - name: Validate inputs (minimal)
      assert:
        that:
          - target_user | length > 0
          - new_password_plain | length >= 6
        fail_msg: "Set target_user and new_password_plain (min 6 chars) via extra-vars or Vault."
        success_msg: "Inputs validated for user {{ target_user }}."

  tasks:
    - name: Ensure account exists, unlock, and reset password
      user:
        name: "{{ target_user }}"
        password: "{{ new_password_plain | password_hash('sha512') }}"
        update_password: always
        password_lock: false

    - name: Force password change at next login (expire now)
      command: chage -d 0 {{ target_user }}
      changed_when: false

    # ------------------- SOC audit breadcrumb -------------------
    - name: Append SOC audit line (control node)
      delegate_to: localhost
      lineinfile:
        path: "{{ lookup('env','SOC_AUDIT_LOG') | default('soc_audit.log', true) }}"
        line: >-
          {{ {'timestamp': lookup('pipe','date -Iseconds'),
               'action': 'reset_user_password',
               'host': inventory_hostname,
               'user': target_user } | to_json }}
        create: true
        insertafter: EOF
      changed_when: false
