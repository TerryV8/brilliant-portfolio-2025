---
# Playbook: Create Linux user with a securely hashed password (SHA-512)
# Purpose:
#  - Create or update a local Linux user and set its password using a hashed value
#  - Never prints the plaintext password
#  - Optionally force password change at next login
#  - Appends a SOC audit line for traceability
# Usage examples:
#  ansible-playbook playbooks/create_user_with_hashed_password.yml --become \
#    -e 'target_user=jdoe new_password_plain=StrongP@ssw0rd!'
#  ansible-playbook playbooks/create_user_with_hashed_password.yml --become \
#    -e 'target_user=jdoe new_password_plain=StrongP@ssw0rd! force_change_next_login=false'

- name: Create user with hashed password
  hosts: all
  become: true
  gather_facts: false

  vars:
    target_user: ""               # required
    new_password_plain: ""        # required; min length 8
    force_change_next_login: true  # set password to expire so user must change
    user_shell: "/bin/bash"

  pre_tasks:
    - name: Validate required inputs
      assert:
        that:
          - target_user | length > 0
          - new_password_plain | length >= 8
        fail_msg: "Provide -e 'target_user=<name> new_password_plain=<min 8 chars>'"

    - name: Hash the new password (SHA-512)
      set_fact:
        new_password_hashed: "{{ new_password_plain | password_hash('sha512') }}"

  tasks:
    - name: Ensure user exists with hashed password
      user:
        name: "{{ target_user }}"
        state: present
        create_home: true
        shell: "{{ user_shell }}"
        password: "{{ new_password_hashed }}"
        update_password: always

    - name: Force password change at next login (optional)
      command: chage -d 0 {{ target_user }}
      when: force_change_next_login | bool
      changed_when: true

    - name: Summary
      debug:
        msg: >-
          User {{ target_user }} ensured present with hashed password. Force change next login={{ force_change_next_login }}.

    - name: Append SOC audit line
      delegate_to: localhost
      lineinfile:
        path: "{{ lookup('env','SOC_AUDIT_LOG') | default('soc_audit.log', true) }}"
        line: >-
          {{ {'timestamp': lookup('pipe','date -Iseconds'),
               'event.action': 'create_user_with_hashed_password',
               'host.name': inventory_hostname,
               'user.name': target_user,
               'force_change': force_change_next_login } | to_json }}
        create: true
        insertafter: EOF
      changed_when: false
